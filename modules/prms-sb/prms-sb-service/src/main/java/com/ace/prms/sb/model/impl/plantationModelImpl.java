/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ace.prms.sb.model.impl;

import com.ace.prms.sb.model.plantation;
import com.ace.prms.sb.model.plantationModel;
import com.ace.prms.sb.model.plantationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the plantation service. Represents a row in the &quot;prms_plantation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>plantationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link plantationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see plantationImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class plantationModelImpl
	extends BaseModelImpl<plantation> implements plantationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a plantation model instance should use the <code>plantation</code> interface instead.
	 */
	public static final String TABLE_NAME = "prms_plantation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"plantId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"plantType", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"origin", Types.VARCHAR}, {"yieldMeasure", Types.INTEGER},
		{"lifeSpan", Types.INTEGER}, {"breed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("plantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("plantType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("origin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yieldMeasure", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lifeSpan", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("breed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table prms_plantation (uuid_ VARCHAR(75) null,plantId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,plantType VARCHAR(75) null,name VARCHAR(75) null,origin VARCHAR(75) null,yieldMeasure INTEGER,lifeSpan INTEGER,breed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table prms_plantation";

	public static final String ORDER_BY_JPQL = " ORDER BY plantation.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY prms_plantation.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long NAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static plantation toModel(plantationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		plantation model = new plantationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPlantId(soapModel.getPlantId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPlantType(soapModel.getPlantType());
		model.setName(soapModel.getName());
		model.setOrigin(soapModel.getOrigin());
		model.setYieldMeasure(soapModel.getYieldMeasure());
		model.setLifeSpan(soapModel.getLifeSpan());
		model.setBreed(soapModel.getBreed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<plantation> toModels(plantationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<plantation> models = new ArrayList<plantation>(soapModels.length);

		for (plantationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public plantationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _plantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _plantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return plantation.class;
	}

	@Override
	public String getModelClassName() {
		return plantation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<plantation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<plantation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<plantation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((plantation)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<plantation, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<plantation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(plantation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<plantation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<plantation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<plantation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<plantation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<plantation, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<plantation, Object>>();
		Map<String, BiConsumer<plantation, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<plantation, ?>>();

		attributeGetterFunctions.put("uuid", plantation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<plantation, String>)plantation::setUuid);
		attributeGetterFunctions.put("plantId", plantation::getPlantId);
		attributeSetterBiConsumers.put(
			"plantId", (BiConsumer<plantation, Long>)plantation::setPlantId);
		attributeGetterFunctions.put("groupId", plantation::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<plantation, Long>)plantation::setGroupId);
		attributeGetterFunctions.put("companyId", plantation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<plantation, Long>)plantation::setCompanyId);
		attributeGetterFunctions.put("userId", plantation::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<plantation, Long>)plantation::setUserId);
		attributeGetterFunctions.put("userName", plantation::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<plantation, String>)plantation::setUserName);
		attributeGetterFunctions.put("createDate", plantation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<plantation, Date>)plantation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", plantation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<plantation, Date>)plantation::setModifiedDate);
		attributeGetterFunctions.put("plantType", plantation::getPlantType);
		attributeSetterBiConsumers.put(
			"plantType",
			(BiConsumer<plantation, String>)plantation::setPlantType);
		attributeGetterFunctions.put("name", plantation::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<plantation, String>)plantation::setName);
		attributeGetterFunctions.put("origin", plantation::getOrigin);
		attributeSetterBiConsumers.put(
			"origin", (BiConsumer<plantation, String>)plantation::setOrigin);
		attributeGetterFunctions.put(
			"yieldMeasure", plantation::getYieldMeasure);
		attributeSetterBiConsumers.put(
			"yieldMeasure",
			(BiConsumer<plantation, Integer>)plantation::setYieldMeasure);
		attributeGetterFunctions.put("lifeSpan", plantation::getLifeSpan);
		attributeSetterBiConsumers.put(
			"lifeSpan",
			(BiConsumer<plantation, Integer>)plantation::setLifeSpan);
		attributeGetterFunctions.put("breed", plantation::getBreed);
		attributeSetterBiConsumers.put(
			"breed", (BiConsumer<plantation, String>)plantation::setBreed);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPlantId() {
		return _plantId;
	}

	@Override
	public void setPlantId(long plantId) {
		_plantId = plantId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getPlantType() {
		if (_plantType == null) {
			return "";
		}
		else {
			return _plantType;
		}
	}

	@Override
	public void setPlantType(String plantType) {
		_plantType = plantType;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getOrigin() {
		if (_origin == null) {
			return "";
		}
		else {
			return _origin;
		}
	}

	@Override
	public void setOrigin(String origin) {
		_origin = origin;
	}

	@JSON
	@Override
	public int getYieldMeasure() {
		return _yieldMeasure;
	}

	@Override
	public void setYieldMeasure(int yieldMeasure) {
		_yieldMeasure = yieldMeasure;
	}

	@JSON
	@Override
	public int getLifeSpan() {
		return _lifeSpan;
	}

	@Override
	public void setLifeSpan(int lifeSpan) {
		_lifeSpan = lifeSpan;
	}

	@JSON
	@Override
	public String getBreed() {
		if (_breed == null) {
			return "";
		}
		else {
			return _breed;
		}
	}

	@Override
	public void setBreed(String breed) {
		_breed = breed;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(plantation.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), plantation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public plantation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (plantation)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		plantationImpl plantationImpl = new plantationImpl();

		plantationImpl.setUuid(getUuid());
		plantationImpl.setPlantId(getPlantId());
		plantationImpl.setGroupId(getGroupId());
		plantationImpl.setCompanyId(getCompanyId());
		plantationImpl.setUserId(getUserId());
		plantationImpl.setUserName(getUserName());
		plantationImpl.setCreateDate(getCreateDate());
		plantationImpl.setModifiedDate(getModifiedDate());
		plantationImpl.setPlantType(getPlantType());
		plantationImpl.setName(getName());
		plantationImpl.setOrigin(getOrigin());
		plantationImpl.setYieldMeasure(getYieldMeasure());
		plantationImpl.setLifeSpan(getLifeSpan());
		plantationImpl.setBreed(getBreed());

		plantationImpl.resetOriginalValues();

		return plantationImpl;
	}

	@Override
	public int compareTo(plantation plantation) {
		int value = 0;

		value = getName().compareTo(plantation.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof plantation)) {
			return false;
		}

		plantation plantation = (plantation)obj;

		long primaryKey = plantation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		plantationModelImpl plantationModelImpl = this;

		plantationModelImpl._originalUuid = plantationModelImpl._uuid;

		plantationModelImpl._originalGroupId = plantationModelImpl._groupId;

		plantationModelImpl._setOriginalGroupId = false;

		plantationModelImpl._originalCompanyId = plantationModelImpl._companyId;

		plantationModelImpl._setOriginalCompanyId = false;

		plantationModelImpl._setModifiedDate = false;

		plantationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<plantation> toCacheModel() {
		plantationCacheModel plantationCacheModel = new plantationCacheModel();

		plantationCacheModel.uuid = getUuid();

		String uuid = plantationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			plantationCacheModel.uuid = null;
		}

		plantationCacheModel.plantId = getPlantId();

		plantationCacheModel.groupId = getGroupId();

		plantationCacheModel.companyId = getCompanyId();

		plantationCacheModel.userId = getUserId();

		plantationCacheModel.userName = getUserName();

		String userName = plantationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			plantationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			plantationCacheModel.createDate = createDate.getTime();
		}
		else {
			plantationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			plantationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			plantationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		plantationCacheModel.plantType = getPlantType();

		String plantType = plantationCacheModel.plantType;

		if ((plantType != null) && (plantType.length() == 0)) {
			plantationCacheModel.plantType = null;
		}

		plantationCacheModel.name = getName();

		String name = plantationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			plantationCacheModel.name = null;
		}

		plantationCacheModel.origin = getOrigin();

		String origin = plantationCacheModel.origin;

		if ((origin != null) && (origin.length() == 0)) {
			plantationCacheModel.origin = null;
		}

		plantationCacheModel.yieldMeasure = getYieldMeasure();

		plantationCacheModel.lifeSpan = getLifeSpan();

		plantationCacheModel.breed = getBreed();

		String breed = plantationCacheModel.breed;

		if ((breed != null) && (breed.length() == 0)) {
			plantationCacheModel.breed = null;
		}

		return plantationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<plantation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<plantation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<plantation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((plantation)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<plantation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<plantation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<plantation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((plantation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		plantation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		plantation.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _plantId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _plantType;
	private String _name;
	private String _origin;
	private int _yieldMeasure;
	private int _lifeSpan;
	private String _breed;
	private long _columnBitmask;
	private plantation _escapedModel;

}